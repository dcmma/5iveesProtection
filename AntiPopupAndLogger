-- THIS BREAKS LUARMOR & LURAPH SCRIPTS! EXECUTE THEM BEFORE ENABLING THIS WITH THE SCROLL LOCK KEY
-- After executing, check workspace\Protections to edit what scripts can access your HWID
-- Change settings in lines 6-8, 87, 95, and 235

--== CONFIG ==--
getgenv().AntiDiscordLogPath = "Protections/anti_discord_log.txt"
getgenv().PrivacyLogPath = "Protections/privacy_block_log.txt"
getgenv().EnablePrivacyLogs = true

local ProtectionsFolderName = "Protections"
local HWIDExceptionsFileName = "hwid_exceptions.txt"
local hwidExceptions = {}

--== Services ==--
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")

--== Flags ==--
local isActivated = false
local protectionsPaused = false
local lastScrollPress = 0

--== Notify Function ==--
local function notify(title, text)
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Duration = 5
        })
    end)
end

--== Helpers ==--
local function ensureProtectionsFolder()
    if isfolder and not isfolder(ProtectionsFolderName) then
        makefolder(ProtectionsFolderName)
    end
end

local function loadHWIDExceptions()
    hwidExceptions = {}
    local path = ProtectionsFolderName .. "/" .. HWIDExceptionsFileName
    if isfile and isfile(path) then
        for line in readfile(path):gmatch("[^\r\n]+") do
            local trimmed = line:match("^%s*(.-)%s*$")
            if trimmed ~= "" and not trimmed:match("^%-%-") then
                table.insert(hwidExceptions, trimmed:lower())
            end
        end
    elseif writefile then
        writefile(path, "-- Put trusted script names here.\n-- Example: script1.lua\n")
    end

    print(string.format("âœ… [Condom Anti-Discord & HWID Protection loaded with %d exception%s]",
        #hwidExceptions,
        #hwidExceptions == 1 and "" or "s"))
end

local function isTrustedScript()
    local info = debug.getinfo(3, "S")
    if info and info.source then
        local src = info.source:lower()
        for _, exc in pairs(hwidExceptions) do
            if src:find(exc, 1, true) then
                return true
            end
        end
    end
    return false
end

--== Always-On Anti-Discord ==--
local function log_to_file(path, source, detail)
    if not path or not source or not detail then return end
    local line = string.format("[%s] Blocked %s: %s\n", os.date(), source, detail)
    if writefile and isfile then
        if not isfile(path) then
            writefile(path, line)
        else
            appendfile(path, line)
        end
    end
end

local allowedUrls = {
    "mytrustedapi.com", "allowedsite.org", "luarmor.net", "roblox.com", "robloxapi.com",
    "setup.roblox.com", "friends.roblox.com", "presence.roblox.com", "chat.roblox.com",
    "realtime.roblox.com", "ws.roblox.com", "web.roblox.com", "cdn.luarmor.net", "api.luarmor.net",
    "raw.githubusercontent.com", "github.com", "gist.github.com", "api.github.com"
}

local discordDomains = { "discord.gg", "discordapp.com", "discord.com" }
local privacyDomains = {
    "ipify.org", "ip-api.com", "ifconfig.me", "icanhazip.com", "whatismyipaddress.com",
    "grabify.link", "iplogger.org", "iplogger.com", "iplogger.co", "yip.su", "2no.co", "blasze.com"
}

local function isUrlAllowed(url)
    url = url:lower()
    for _, allowed in ipairs(allowedUrls) do
        if url:find(allowed, 1, true) then return true end
    end
    return false
end

local function isDiscordUrl(url)
    url = url:lower()
    for _, d in ipairs(discordDomains) do
        if url:find(d, 1, true) then return true end
    end
    return false
end

local function isPrivacyUrl(url)
    url = url:lower()
    for _, p in ipairs(privacyDomains) do
        if url:find(p, 1, true) then return true end
    end
    return false
end

--== Protect HWID ==--
local function protectHWID()
    local RAS = game:GetService("RbxAnalyticsService")
    if RAS and RAS.GetClientId then
        local old = RAS.GetClientId
        hookfunction(old, function(...)
            if protectionsPaused or isTrustedScript() then
                return old(...)
            else
                error("[HWID Protection] Access to GetClientId() is blocked.", 2)
            end
        end)
    end
end

--== Hook HTTP Functions ==--
local function hook_http(func_name)
    local fn = rawget(getgenv(), func_name)
    if type(fn) == "function" and hookfunction then
        hookfunction(fn, function(data)
            local url = (type(data) == "string" and data) or
                        (type(data) == "table" and (data.Url or data.URL or data.url)) or ""
            if not isUrlAllowed(url) then
                if isDiscordUrl(url) then
                    notify("[Anti-Discord]", "Blocked HTTP: " .. url)
                    log_to_file(getgenv().AntiDiscordLogPath, func_name, url)
                    return nil
                elseif not protectionsPaused and isPrivacyUrl(url) then
                    notify("[Privacy]", "Blocked HTTP: " .. url)
                    log_to_file(getgenv().PrivacyLogPath, func_name, url)
                    return nil
                end
            end
            return fn(data)
        end)
    end
end

local function detect_and_hook_http()
    for k, v in pairs(getgenv()) do
        if type(v) == "function" and k:lower():find("http") then
            hook_http(k)
        end
    end
end

--== Protection Activator ==--
local function activateProtections()
    if isActivated then return end
    isActivated = true

    ensureProtectionsFolder()
    loadHWIDExceptions()
    detect_and_hook_http()
    protectHWID()

    notify("[Condom]", "Protections activated. Double tap Scroll Lock to pause HWID + IP protection.")
end

--== Pause Toggle ==--
local function toggleProtections()
    protectionsPaused = not protectionsPaused
    local status = protectionsPaused and "PAUSED" or "RESUMED"
    notify("[Condom]", "HWID + IP Protections " .. status)
end

--== Scroll Lock Listener ==--
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.ScrollLock then
        local now = tick()
        if now - lastScrollPress <= 0.6 then
            toggleProtections()
        elseif not isActivated then
            activateProtections()
        end
        lastScrollPress = now
    end
end)

--== Always-on Anti-Discord ==--
local function enforceAntiDiscord()
    -- Hook queue_on_teleport
    if queue_on_teleport then
        local old = queue_on_teleport
        queue_on_teleport = function(code)
            local str = tostring(code):lower()
            if isDiscordUrl(str) then
                notify("[Anti-Discord]", "Blocked teleport: " .. code)
                log_to_file(getgenv().AntiDiscordLogPath, "queue_on_teleport", code)
                return
            end
            return old(code)
        end
    end

    -- Hook setclipboard
    if setclipboard then
        local old = setclipboard
        setclipboard = function(text)
            if type(text) == "string" and text:lower():find("discord.gg") then
                notify("[Anti-Discord]", "Blocked clipboard: " .. text)
                log_to_file(getgenv().AntiDiscordLogPath, "setclipboard", text)
                return
            end
            return old(text)
        end
    end
end

--== Auto Activation Timer ==--
task.delay(75, function()
    if not isActivated then
        activateProtections()
    end
end)

--== Initial Notifications ==--
local player = Players.LocalPlayer
if not player.Character or not player.Character.Parent then
    player.CharacterAdded:Wait()
end
notify("[Condom]", "Press Scroll Lock to activate. (Auto-Activates after 75 seconds)")

--== Init ==--
enforceAntiDiscord() -- Always-on
