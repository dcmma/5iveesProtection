--== CONFIG ==--
getgenv().AntiDiscordLogPath = "Protections/anti_discord_log.txt"
getgenv().PrivacyLogPath = "Protections/privacy_block_log.txt"
getgenv().EnableAntiDiscordLogs = true
getgenv().EnablePrivacyLogs = true

local ProtectionsFolderName = "Protections"
local HWIDExceptionsFileName = "hwid_exceptions.txt"
local hwidExceptions = {}

local function warn(...) warn(...) end

-- Ensure protections folder exists
local function ensureProtectionsFolder()
    if isfolder and not isfolder(ProtectionsFolderName) then
        makefolder(ProtectionsFolderName)
    elseif not isfolder then
        warn("[Protections] Folder creation functions missing; logs may fail.")
    end
end

-- Load HWID exceptions from file
local function loadHWIDExceptions()
    hwidExceptions = {}
    local path = ProtectionsFolderName.."/"..HWIDExceptionsFileName
    if isfile and isfile(path) then
        for line in readfile(path):gmatch("[^\r\n]+") do
            local trimmed = line:match("^%s*(.-)%s*$")
            if trimmed ~= "" and not trimmed:match("^%-%-") then
                table.insert(hwidExceptions, trimmed:lower())
            end
        end
    elseif writefile then
        writefile(path,
            "-- Enter script names that need HWID exceptions, one per line.\n" ..
            "-- Example:\n\n-- script1.lua\n-- trusted_script.txt\n\n"
        )
    end
end

-- Check if calling script is trusted
local function isTrustedScript()
    local info = debug.getinfo(3, "S")
    if info and info.source then
        local src = info.source:lower()
        for _, exc in pairs(hwidExceptions) do
            if src:find(exc, 1, true) then
                return true
            end
        end
    end
    return false
end

-- Override GetClientId to block or error
local function protectHWID()
    local RAS = game:GetService("RbxAnalyticsService")
    if RAS and RAS.GetClientId then
        local old = RAS.GetClientId
        local errorMessage = "[HWID Protection] Access to GetClientId() is blocked."

        hookfunction(old, function(...)
            if isTrustedScript() then
                return old(...)
            else
                error(errorMessage, 2)
            end
        end)
    end
end

-- Logging utility
local function log_to_file(path, source, detail)
    if not path or not source or not detail then return end
    local line = string.format("[%s] Blocked %s: %s\n", os.date("%Y-%m-%d %H:%M:%S"), source, detail)
    if writefile and isfile and getgenv().EnableAntiDiscordLogs then
        if not isfile(path) then
            writefile(path, line)
        else
            appendfile(path, line)
        end
    end
end

-- URL checks
local allowedUrls = {
    "mytrustedapi.com", "allowedsite.org", "luarmor.net", "roblox.com", "robloxapi.com",
    "setup.roblox.com", "friends.roblox.com", "presence.roblox.com", "chat.roblox.com",
    "realtime.roblox.com", "ws.roblox.com", "web.roblox.com", "cdn.luarmor.net", "api.luarmor.net"
}

local discordDomains = { "discord.gg", "discordapp.com", "discord.com" }
local privacyDomains = {
    "ipify.org", "ip-api.com", "ifconfig.me", "icanhazip.com", "whatismyipaddress.com",
    "grabify.link", "iplogger.org", "iplogger.com", "iplogger.co", "yip.su", "2no.co", "blasze.com"
}

local function isUrlAllowed(url)
    url = url:lower()
    for _, allowed in pairs(allowedUrls) do
        if url:find(allowed, 1, true) then return true end
    end
    return false
end

local function isDiscordUrl(url)
    url = url:lower()
    for _, d in pairs(discordDomains) do
        if url:find(d, 1, true) then return true end
    end
    return false
end

local function isPrivacyUrl(url)
    url = url:lower()
    for _, p in pairs(privacyDomains) do
        if url:find(p, 1, true) then return true end
    end
    return false
end

-- queue_on_teleport hook
if queue_on_teleport then
    local old = queue_on_teleport
    queue_on_teleport = function(code)
        local str = tostring(code):lower()
        if not isUrlAllowed(str) then
            if isDiscordUrl(str) then
                warn("[Anti-Discord] Blocked queue_on_teleport: "..code)
                log_to_file(getgenv().AntiDiscordLogPath, "queue_on_teleport", code)
                return
            elseif isPrivacyUrl(str) then
                warn("[Privacy Protection] Blocked queue_on_teleport: "..code)
                log_to_file(getgenv().PrivacyLogPath, "queue_on_teleport", code)
                return
            end
        end
        return old(code)
    end
end

-- HTTP hook
local function hook_http(func_name)
    local fn = rawget(getgenv(), func_name)
    if type(fn) == "function" and hookfunction then
        hookfunction(fn, function(data)
            local url = (type(data) == "string" and data) or
                        (type(data) == "table" and (data.Url or data.URL or data.url)) or ""
            url = url:lower()
            if not isUrlAllowed(url) then
                if isDiscordUrl(url) then
                    warn("[Anti-Discord] Blocked HTTP request: "..url)
                    log_to_file(getgenv().AntiDiscordLogPath, func_name, url)
                    return nil
                elseif isPrivacyUrl(url) then
                    warn("[Privacy Protection] Blocked HTTP request: "..url)
                    log_to_file(getgenv().PrivacyLogPath, func_name, url)
                    return nil
                end
            end
            return fn(data)
        end)
    end
end

local function detect_and_hook_http()
    for k, v in pairs(getgenv()) do
        if type(v) == "function" and k:lower():find("http") then
            hook_http(k)
        end
    end
end

-- Block clipboard and command execution
local function block_discord_methods()
    if os and os.execute then
        local old = os.execute
        os.execute = function(cmd)
            if type(cmd) == "string" and cmd:lower():find("discord") then
                warn("[Anti-Discord] Blocked os.execute: "..cmd)
                log_to_file(getgenv().AntiDiscordLogPath, "os.execute", cmd)
                return nil
            end
            return old(cmd)
        end
    end

    if setclipboard then
        local old = setclipboard
        setclipboard = function(text)
            if type(text) == "string" and text:lower():find("discord.gg") then
                warn("[Anti-Discord] Blocked setclipboard: "..text)
                log_to_file(getgenv().AntiDiscordLogPath, "setclipboard", text)
                return nil
            end
            return old(text)
        end
    end
end

local function block_privacy_methods()
    local suspicious_cmds = {
        "ipconfig", "ifconfig", "systeminfo", "wmic", "powershell",
        "getmac", "netstat", "arp", "tracert", "nslookup"
    }

    if os and os.execute then
        local old = os.execute
        os.execute = function(cmd)
            if type(cmd) == "string" then
                for _, s in ipairs(suspicious_cmds) do
                    if cmd:lower():find(s, 1, true) then
                        warn("[Privacy Protection] Blocked os.execute: "..cmd)
                        log_to_file(getgenv().PrivacyLogPath, "os.execute", cmd)
                        return nil
                    end
                end
            end
            return old(cmd)
        end
    end

    if setclipboard then
        local old = setclipboard
        setclipboard = function(text)
            if type(text) == "string" then
                for _, s in ipairs(privacyDomains) do
                    if text:lower():find(s, 1, true) then
                        warn("[Privacy Protection] Blocked setclipboard: "..text)
                        log_to_file(getgenv().PrivacyLogPath, "setclipboard", text)
                        return nil
                    end
                end
            end
            return old(text)
        end
    end

    if io and io.popen then
        local old = io.popen
        io.popen = function(cmd)
            if type(cmd) == "string" then
                for _, s in ipairs(suspicious_cmds) do
                    if cmd:lower():find(s, 1, true) then
                        warn("[Privacy Protection] Blocked io.popen: "..cmd)
                        log_to_file(getgenv().PrivacyLogPath, "io.popen", cmd)
                        return nil
                    end
                end
            end
            return old(cmd)
        end
    end
end

-- Initialization
ensureProtectionsFolder()
loadHWIDExceptions()
detect_and_hook_http()
block_discord_methods()
block_privacy_methods()
protectHWID()

-- Final log
local count = #hwidExceptions
print("[âœ… 5ivee's Anti-Discord & HWID Protection loaded with "..count.." HWID exception"..(count==1 and "" or "s")..".]")
